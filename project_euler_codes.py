"""
This is the main file to solve the problems on Project Euler.

Author(s) : Vivek Kumar

"""

import numpy as np
import sympy as sp
import scipy as scp
import time

def problem_1():
	"Solution to problem 1"
	"""
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

	Find the sum of all the multiples of 3 or 5 below 1000.
	"""
	# Start time
	start_time = time.time()
	
	max_num = 1000 # The largest number we want to find the sum to
	
	divisors = np.array([3, 5]).astype(int) # List of divisors

	val_sum = 0 # Initialize the sum as 0

	for i in range(max_num-1): # Loop over all the numbers below max_num
		for j in range(len(divisors)): # Loop over all the divisors we are interested in
			if (i+1) % divisors[j] == 0: # Check if the divisor divides the number
				val_sum += (i+1) # If it does add the number to the sum
				break # Break from the j-loop to avoid repetitions
	
	print('The sum of numbers upto %d is %d' %(max_num, val_sum)) # Print the sum

	# Print the time taken to run 
	print 'Problem 1 Runtime:', str(time.time() - start_time), 'seconds'


def problem_2():
	"Solution to problem 2"
	"""
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	"""
	start_time = time.time()

	max_num = 4000000 # Maximum number not exceeded in Fibonacci sequence

	fibonacci_num = np.array([0,1,1]).astype(int) # Variable to keep the fibonacci number, initialize with 0,1,1

	val_sum = 0 # Variable to keep the sum, initialize to 0

	while fibonacci_num[2] < max_num :
		if (fibonacci_num[2] % 2) == 0:
			val_sum += fibonacci_num[2]
		fibonacci_num[0] = fibonacci_num[1]
		fibonacci_num[1] = fibonacci_num[2]
		fibonacci_num[2] =  fibonacci_num[0]+fibonacci_num[1]


	print('The largest fibbonaci number less than %d is %d' %(max_num, fibonacci_num[1]))
	print('The sum of numbers upto %d is %d' %(max_num, val_sum)) # Print the sum

	# Print the time taken to run 
	print 'Problem 2 Runtime:', str(time.time() - start_time), 'seconds'


def check_prime(i):
	"Checks if a number is prime"
	sqrt_i = np.floor(np.sqrt(i)).astype(int)
	if sqrt_i==1:
		prime = 1
	for j in range(2,sqrt_i+1):
		if i % j ==0:
			prime = 0
			break
		else:
			prime = 1
			
	return prime

def problem_3():
	"Solution to problem 3"
	start_time = time.time()
	"""
	The prime factors of 13195 are 5, 7, 13 and 29.

	What is the largest prime factor of the number 600851475143 ?
	"""
	num = 600851475143 # Number whose largets prime we are seeking
	
	"""
	The crude way is to find the largest prime upto sqrt(num) which divides num.
	"""
	largest_prime = 1 # Initialize the largest prime

	sqrt_num = np.sqrt(num)
	sqrt_num = np.floor(sqrt_num).astype(int)
	
	# Check if number is divisible by 2
	if num % 2 ==0:
		# Check if number by 2 is prime if prime it is the largest
		if check_prime(num/2):
			largest_prime = num/2
		else:
			largest_prime = 2

	for i in range(3, sqrt_num+1):
		if num % i == 0:
			if check_prime(i) :
				largest_prime = i

	if largest_prime == 1:
		print('The number itself is a prime')
	
	print('The largest prime divisor is %d' %(largest_prime))

	# Print the time taken to run 
	print 'Problem 3 Runtime:', str(time.time() - start_time), 'seconds'

if __name__ == '__main__':

	problem_1()
	problem_2()
	problem_3()
